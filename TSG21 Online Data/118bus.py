# --------------------------------------------------------------------------------------------------------------------
# The "data" repository includes all the raw RES and load data needed for the 118-bus test case.
# In the test case used in the manuscript, the modifications are presented in the function "obtainUBdata"
# The system is defined in "case118"
# --------------------------------------------------------------------------------------------------------------------from Bus import Bus
from Bus import Bus
from libs.contracts import *
from libs.controls import *

def case118(n=118):
    U_ref = 11  # kv
    P_ref = 1  # MVA
    I_ref = P_ref/U_ref  # kA
    R_ref = U_ref/I_ref  # ohm
    n = 118
    # Topology and loads
    FT = np.array([[118,110],
        [117,116],
        [116,115],
        [115,114],
        [114,113],
        [113,100],
        [112,111],
        [111,110],
        [110, 109],
        [109, 108],
        [108, 107],
        [107, 106],
        [106, 105],
        [105, 104],
        [104, 103],
        [103, 102],
        [102, 101],
        [101, 100],
        [100, 1],
        [99, 98],
        [98, 97],
        [97, 96],
        [96, 91],
        [95, 94],
        [94, 93],
        [93, 92],
        [92, 91],
        [91, 90],
        [90, 89],
        [89, 65],
        [88, 87],
        [87, 86],
        [86, 79],
        [85, 84],
        [84, 83],
        [83, 82],
        [82, 81],
        [81, 80],
                   [80, 79],
                   [79, 78],
                   [78, 64],
                   [77, 76],
                   [76, 75],
                   [75, 74],
                   [74, 73],
                   [73, 72],
                   [72, 71],
                   [71, 70],
                   [70, 69],
                   [69, 68],
                   [68, 67],
                   [67, 66],
                   [66, 65],
                   [65, 64],
                   [64, 63],
                   [63, 1],
                   [62, 61],
                   [61, 30],
                   [60, 59],
                   [59, 58],
                   [58, 57],
                   [57, 56],
                   [56, 55],
                   [55, 54],
                   [54, 53],
                   [53, 29],
                   [52, 51],
                   [51, 50],
                   [50, 49],
                   [49, 48],
                   [48, 47],
                   [47, 46],
                   [46, 45],
                   [45, 44],
                   [44, 29],
                   [43, 42],
                   [42, 41],
                   [41, 40],
                   [40, 39],
                   [39, 38],
                   [38, 37],
                   [37, 36],
                   [36, 35],
                   [35, 34],
                   [34, 33],
                   [33, 32],
                   [32, 31],
                   [31, 30],
                   [30, 29],
                   [29, 28],
                   [28, 4],
                   [27, 26],
                   [26, 25],
                   [25, 24],
                   [24, 23],
                   [23, 22],
                   [22, 21],
                   [21, 20],
                   [20, 19],
                   [19, 18],
                   [18, 11],
                   [17, 16],
                   [16, 15],
                   [15, 14],
                   [14, 13],
                   [13, 12],
                   [12, 11],
                   [11, 10],
                   [10, 2],
                   [9, 8],
                   [8, 7],
                   [7, 6],
                   [6, 5],
                   [5, 4],
                   [4, 2],
                   [3, 2],
                   [2, 1]])-1
    RX = np.array([[0.2445, 0.0879],
                   [0.489, 0.438],
                   [0.405, 0.367],
                   [0.3732, 0.246],
                   [0.1866, 0.127],
                   [0.6102, 0.2196],
                   [0.2301, 0.0828],
                   [0.2088, 0.0753],
                   [0.3819, 0.1374],
                   [0.1626, 0.0585],
                   [0.3819, 0.1374],
                   [0.156, 0.0561],
                   [0.33, 0.099],
                   [0.1632, 0.0588],
                   [0.447, 0.1608],
                   [0.2307, 0.1203],
                   [0.1347, 0.0888],
                   [0.1501, 0.234],
                   [0.0625, 0.0265],
                   [0.0746, 0.318],
                   [0.1866, 0.122],
                   [0.196,0.18],
                   [0.196,0.18],
                   [0.496,0.138],
                   [0.233,0.115],
                   [0.266,0.1227],
                   [0.266,0.1227],
                   [0.266,0.1227],
                   [0.266,0.1227],
                   [0.669,0.2412],
                   [0.16,0.393],
                   [0.2, 0.23],
                   [0.16, 0.182],
                   [0.18, 0.148],
                   [0.252, 0.106],
                   [0.23, 0.128],
                   [0.154, 0.148],
                   [0.26, 0.139],
                   [0.186, 0.1227],
                   [0.186, 0.1227],
                   [0.559, 0.3687],
                   [0.126, 0.0453],
                   [0.591, 0.1773],
                   [0.233, 0.084],
                   [0.206, 0.144],
                   [0.303, 0.1092],
                   [0.303, 0.1092],
                   [0.165, 0.06],
                   [0.962, 0.761],
                   [0.406, 0.1461],
                   [0.504, 0.3303],
                   [0.383, 0.138],
                   [0.21, 0.0759],
                   [0.255, 0.0918],
                   [0.117, 0.2016],
                   [0.028, 0.0418],

                   [0.133, 0.099],
                   [0.187, 0.261],

                   [0.247, 0.8922],
                   [0.207, 0.0747],
                   [0.338,0.1218],
                   [0.338, 0.1218],
                   [0.706, 0.5461],
                   [0.406, 0.1461],
                   [0.406, 0.1461],
                   [0.391, 0.141],

                   [0.27, 0.1779],
                   [0.339, 0.1221],
                   [0.27, 0.0972],
                   [0.42, 0.2436],
                   [1.18, 0.85],
                   [0.28, 0.15],
                   [0.13, 0.0194],
                   [0.31, 0.0194],
                   [0.33, 0.0194],

                   [0.405, 0.1458],
                   [0.405, 0.1458],
                   [0.12, 0.0789],
                   [0.24, 0.1581],
                   [0.15, 0.0987],
                   [0.15, 0.0987],
                   [0.12, 0.0789],
                   [0.21, 0.1383],
                   [0.154, 0.162],
                   [0.178, 0.234],
                   [0.178, 0.234],
                   [0.12, 0.054],
                   [0.21, 0.243],
                   [0.12, 0.2766],
                   [0.012, 0.0276],
                   [0.015, 0.0296],

                   [0.178, 0.134],
                   [0.178, 0.134],
                   [0.133, 0.104],
                   [0.293, 0.1348],
                   [1.41, 0.723],
                   [0.12, 0.0789],
                   [0.12, 0.189],
                   [0.16, 0.196],
                   [0.118, 0.185],
                   [0.218, 0.285],
                   [0.157, 0.171],
                   [0.16, 0.18],
                   [0.15, 0.045],
                   [0.18, 0.118],
                   [0.142, 0.1512],
                   [0.187, 0.313],
                   [0.112, 0.0789],
                   [0.166, 0.1344],
                   [0.021, 0.063],
                   [0.018, 0.014],
                   [0.015, 0.0125],
                   [0.015, 0.054],
                   [0.015, 0.054],
                   [0.045, 0.0162],
                   [0.033, 0.01188],
                   [0.036, 0.01296]])/R_ref
    PQ = np.array([[0,0],
                   [133.84,101.14],
                   [16.214,11.292],
                   [34.315,21.845],
                   [73.016,63.602],
                   [144.2,68.604],
                   [104.47,61.725],
                   [28.547,11.503],
                   [87.56,51.073],
                   [198.2,106.77],

                   [146.8, 75.995],
                   [26.04, 18.687],
                   [52.1, 23.22],
                   [141.9, 117.5],
                   [21.87, 28.79],
                   [33.37, 26.45],
                   [32.43, 25.23],
                   [20.234, 11.906],
                   [156.94, 78.523],
                   [546.29, 351.4],

                   [180.31, 164.2],
                   [93.167, 54.594],
                   [85.18, 39.65],
                   [168.1, 95.178],
                   [125.11, 150.22],
                   [16.03, 24.62],
                   [26.03, 24.62],
                   [594.56, 522.62],
                   [120.62, 59.117],
                   [102.38, 99.554],

                   [513.4, 318.5],
                   [475.23, 456.14],
                   [151.43, 136.79],
                   [205.38, 83.302],
                   [131.6, 93.082],
                   [66.195, 42.361],
                   [73.904, 51.653],
                   [114.77, 57.965],
                   [918.37, 1205.1],
                   [210.3, 146.66],

                   [66.68, 56.608],
                   [42.207, 40.184],
                   [433.74, 283.41],
                   [112.54, 55.134],
                   [53.963, 38.998],
                   [393.05, 342.6],
                   [326.74, 278.45],
                   [536.26, 240.24],
                   [76.247, 66.562],
                   [53.52, 39.76],

                   [40.328, 31.964],
                   [39.653, 20.758],
                   [62.1, 26.86],
                   [92.46, 88.38],
                   [85.188, 55.436],
                   [345.3, 332.4],
                   [22.5, 16.83],
                   [80.551, 49.156],
                   [95.86, 90.758],
                   [62.92, 47.7],

                   [448.4, 369.79],
                   [440.52, 321.64],
                   [478.8, 463.74],
                   [120.94, 52.006],
                   [139.11, 100.34],
                   [391.78, 193.5],
                   [27.741, 26.713],
                   [52.814, 25.257],
                   [66.89, 38.713],
                   [467.5, 395.14],

                   [594.85, 239.74],
                   [132.5, 84.363],
                   [52.699, 22.482],
                   [869.79, 614.775],
                   [31.349, 29.817],
                   [192.39, 122.43],
                   [65.75, 45.37],
                   [238.15, 223.22],
                   [294.55, 162.47],
                   [485.57, 437.92],

                   [243.53, 183.03],
                   [243.53, 183.03],
                   [134.25,119.29],
                   [22.71, 27.96],
                   [49.513, 26.515],
                   [383.78, 257.16],
                   [49.64, 20.6],
                   [22.473, 11.806],
                   [62.93, 42.96],
                   [30.67, 34.93],

                   [62.53, 66.79],
                   [114.57, 81.748],
                   [81.292, 66.525],
                   [31.733, 15.96],
                   [33.32, 60.48],
                   [531.28, 224.85],
                   [507.03, 367.42],
                   [26.38, 11.7],
                   [45.99, 30.392],
                   [100.66, 47.572],

                   [456.48, 350.3],
                   [522.56, 449.29],
                   [408.43, 168.46],
                   [141.48, 134.25],
                   [101.43, 66.024],
                   [96.793, 83.647],
                   [493.92, 419.34],
                   [225.38, 135.88],
                   [509.21, 387.21],
                   [188.5, 173.46],

                   [305.08, 215.37],
                   [54.38, 40.97],
                   [211.14, 192.9],
                   [67.009, 53.336],
                   [162.07, 90.321],
                   [48.785, 29.156],
                   [33.9, 18.98],
                   [918.03, 898.55]])
    PQ = PQ / 1000
    RX = RX[118-n:117,:] * 1
    FT = FT[118-n:117,:]
    # Define the list
    bus_list = [Bus() for i in range(n)]

    # Define the Load
    sample_load = np.array([0.5549771249999912,0.5272282687499916,0.35920822499999205,0.2813692499999923,0.2364911999999931,0.26976194999999215,0.3455698499999927,0.44411849999999287,0.4186723499999927,0.5072681249999924,0.5229780749999914,0.5065597349999907,0.26185967999999343,0.36511717499999247,0.3544352999999922,0.4187371499999928,0.5174093249999927,0.7954276499999903,0.7471192499999914,0.6940541249999913,0.7259093999999916,0.6549108749999911,0.8462915999999902,0.6257407499999921])
    Pload = np.array([sample_load * PQ[i][0] for i in range(n)])
    Qload = np.array([sample_load * PQ[i][1] for i in range(n)])

    for i in range(n):
        bus_list[i].Pload = Pload[i][0:Constant.T] * 1.
        bus_list[i].Ploadl = 0.9 * bus_list[i].Pload
        bus_list[i].Ploadu = 1.1 * bus_list[i].Pload
        bus_list[i].Qload = Qload[i][0:Constant.T] * 1.
        bus_list[i].Qloadl = 0.9 * bus_list[i].Qload
        bus_list[i].Qloadu = 1.1 * bus_list[i].Qload


    # Define the generation
    # -----
    # bus 0 generates between -10MW and 10MW(-10MVA and 10MVA)
    # cost_f = pri .* pgen
    # -----
    pri = np.array(
        [80, 80, 80, 80, 80, 80, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 80,
         80, 80])[0:Constant.T]
    bus_list[0].BuildGeneration(CV=AP(count=0, agent=bus_list[0], pri=pri, LB=-10, UB=10))
    for i in range(1,n):
        if PQ[i][1] >= 350/1000:  # These are implemented with MGTs
            k1 = 0.3
            k2 = 1.2
            bus_list[i].BuildGeneration(
                CV=MGT(count=i, LB=k1 * PQ[i][0], UB=k2 * PQ[i][0],
                                LBQ=0,            UBQ = 0.1*k1*PQ[i][0],
                       cost_fun=lambda x: 20 * (x ** 2 + 4 * x)))
        elif (i % 5 == 2 or i % 5 == 3):  # These are implemented with RESs
            bus_list[i].BuildGeneration(CV=RES(count=i))
        else:  # These are loads
            bus_list[i].BuildGeneration(CV=User_only(count=i))
    return bus_list, n, FT, RX

def obtainUBdata(bus):
    # -------------------------------------------
    # Some operations to reshape the raw data
	# rat and rp are manually defined parameters for reshaping
    # Note that in this case the predicted lower boundaries for the RES ceiling is 0
    # -------------------------------------------
    T = 24
    if bus.count % 33 == 17 or bus.count % 33 == 24:  # These are WTs.
        rat = 4
    else:  # These are PVs.
        rat = 0.35
    NUM = bus.count % 33
    if NUM == 0 or NUM == 32:
        NUM = 1
    with open("data/" + str(NUM) + ".txt", "r") as file:
        for dt in range(T):
            rp = 1.6 if dt <= 5 else 1.2
            bus.UB[dt] = float(file.readline()) * rat * rp * 1
        for dt in range(T):
            # -------------------------------------------
            # Note that in this case the predicted lower boundaries for the RES ceiling is 0
            # -------------------------------------------
            rp = 1.6 if dt <= 5 else 1.2
            bus.UBl[dt] = float(file.readline()) * rat * rp * 0
        for dt in range(T):
            rp = 1.6 if dt <= 5 else 1.2
            bus.UBu[dt] = float(file.readline()) * rat * rp * 1
        if Constant.T > 1:
            bus.UB[1] = bus.UB[0] * 0.95
            bus.UBl[1] = bus.UBl[0] * 0.95
            bus.UBu[1] = bus.UBu[0] * 0.95
        if Constant.T > 10:
            if bus.count % 33 == 17 or bus.count % 33 == 24:
                bus.UBu[10] = (2 * bus.UBu[9] - bus.UBu[11]) * 0.6
                bus.UBl[10] = (2 * bus.UBl[9] - bus.UBl[11]) * 0.6
                bus.UB[10] = (2 * bus.UB[9] - bus.UB[11]) * 0.6
            else:
                bus.UBu[10] = (bus.UBu[9] + bus.UBu[11]) * 0.5
                bus.UBl[10] = (bus.UBl[9] + bus.UBl[11]) * 0.5
                bus.UB[10] = (bus.UB[9] + bus.UB[11]) * 0.5
        # ----------------------------------------
        # reactive power capacity: -UBQ~UBQ
        # ----------------------------------------
        bus.UBQ = (max(bus.UBu) * 1.3) ** 2 - (bus.UBu ** 2)
        if bus.count % 33 == 17 or bus.count % 33 == 24:
            bus.UBQ = 0 * bus.UBQ

    bus.UB = bus.UB[0:Constant.T]
    bus.UBl = bus.UBl[0:Constant.T]
    bus.UBu = bus.UBu[0:Constant.T]
